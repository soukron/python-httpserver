def appName = "python-httpserver"
pipeline {
    agent none
    
    options {
        timeout(time: 20, unit: "MINUTES") 
    }
    
    stages {
        stage("preamble") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            echo "Using project: ${openshift.project()}"
                        }
                    }
                }
            }
        }
        
        stage("cleanup") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            openshift.selector("all", [ app : appName ]).delete() 
                            if (openshift.selector("secrets", appName).exists()) { 
                                openshift.selector("secrets", appName).delete()
                            }
                        }
                    }
                }
            }
        }
        
        stage("create") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            openshift.newApp("${workspace}@script", "--context-dir=src/")
                            openshift.create("route", "edge", appName, "--service=${appName}")
                        }
                    }
                }
            }
        }

    	stage("build") {
      	    steps {
        	script {
            	    openshift.withCluster() {
                	openshift.withProject() {
                  	    def builds = openshift.selector("bc", appName).related("builds")
                  	    timeout(5) { 
                    		builds.untilEach(1) {
                                    return (it.object().status.phase == "Complete")
                                }
                            }
                        }
                    }
                }
            }
        }

        stage("deploy") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            def rm = openshift.selector("dc", appName).rollout()
                            timeout(5) { 
                                openshift.selector("dc", appName).related("pods").untilEach(1) {
                                    return (it.object().status.phase == "Running")
                                }
                            }
                        }
                    }
                }
            }
        }

        stage("tag") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            openshift.tag("${appName}:latest", "${appName}-staging:latest") 
                        }
                    }
                }
            }
        }

    }
}
